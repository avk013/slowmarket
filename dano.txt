Есть продукты A, B, C, D, E, F, G, H, I, J, K, L, M. Каждый продукт стоит определенную сумму.
 
Есть набор правил расчета итоговой суммы:
 
    Если одновременно выбраны А и B, то их суммарная стоимость уменьшается на 10% (для каждой пары А и B)
 
    Если одновременно выбраны D и E, то их суммарная стоимость уменьшается на 5% (для каждой пары D и E)
 
    Если одновременно выбраны E,F,G, то их суммарная стоимость уменьшается на 5% (для каждой тройки E,F,G)
 
    Если одновременно выбраны А и один из [K,L,M], то стоимость выбранного продукта уменьшается на 5%
 
    Если пользователь выбрал одновременно 3 продукта, он получает скидку 5% от суммы заказа
 
    Если пользователь выбрал одновременно 4 продукта, он получает скидку 10% от суммы заказа
 
    Если пользователь выбрал одновременно 5 продуктов, он получает скидку 20% от суммы заказа
 
    Описанные скидки 5,6,7 не суммируются, применяется только одна из них
 
    Продукты A и C не участвуют в скидках 5,6,7
 
    Каждый товар может участвовать только в одной скидке. Скидки применяются последовательно в порядке описанном выше.
 
 
Необходимо написать программу на PHP с использованием ООП которая имея на входе набор продуктов (один продукт может встречаться несколько раз) рассчитывала суммарную их стоимость.
 
Программу необходимо написать максимально просто и максимально гибко.
 
Все параметры задаются в программе статически (пользовательский ввод обрабатывать не нужно). Оценивается подход к решению задачи. Тщательное тестирование решения проводить не требуется.
 
Пожелания к решению:
 
    Чтобы в коде были учтены принципы SOLID (особенно инверсия зависимостей)
 
    Взаимоотношения (контракты) между объектами должны быть прозрачны
 
    Низкая связанность, высокая связность
 
    Желательно предпочтение динамически зависимостям над статическими
 
    Выделение архитектурных слоев - бизнес-логика, инфраструктурный, операционный (см. Domain driven design)
 
 
Пример, как могло бы выглядеть в конечном виде использование кода (предложите свой вариант, данная декларация носит иллюстративный характер).
 
// создаем объекты продуктов
 
$objectA = new Product('A', 1000);
 
$objectB = new Product('B', 100);
 
// … остальные продукты
 
// создаем объекты скидок и конфигурируем их связи с продуктами
 
$discount1 = new Discount_ProductSet();
 
$discount1->setProductSet($objectA, $objectB);
 
$discount1->setDiscount(10);
 
// … остальные скидки
 
// формируем заказ в корзине
 
$productOrder = new Order();
 
$productOrder->push($objectA);
 
$productOrder->push($objectA);
 
$productOrder->push($objectB);
 
// менеджер применения скидок. добавляем в него активные скидки
 
$discountManager = new Discount_Manager();
 
$discountManager->add($discount1);
 
// расчет цены. добавляем в него активные скидки и заказ, производим расчет
 
$calculator = new Calculator();
 
$calculator->setOrder( $productOrder );
 
$calculator->setDiscountManager ($discountManager);
 
print_r($calculator->doCalculation());
 
// следует использовать для проверки передаваемых в методы аргументов возможности php 5.3.
// пример сигнатуры метода public function add(Discount_Abstract $discount );
